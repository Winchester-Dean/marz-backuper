import logging
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from filters.is_admin import is_admin
from config_reader import config
from services.backup import backuper
from scheduler import scheduler_service
from datetime import datetime
import zoneinfo
from pathlib import Path

logger = logging.getLogger(__name__)
router = Router()

AUTHOR = "t.me/stix_r"

def get_file_creation_datetime_str(filepath: Path) -> str:
    try:
        moscow_tz = zoneinfo.ZoneInfo("Europe/Moscow")
        timestamp = filepath.stat().st_mtime
        dt_obj = datetime.fromtimestamp(timestamp, tz=moscow_tz)
        return dt_obj.strftime("%d.%m.%Y %H:%M")
    except Exception:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

@router.message(Command("backup"), is_admin)
async def backup_now_handler(msg: Message):
    args = msg.text.split()
    if len(args) > 1:
        time_arg = args[1]
        try:
            hh, mm = map(int, time_arg.split(":"))
            if not (0 <= hh < 24 and 0 <= mm < 60):
                raise ValueError
            await msg.answer(f"<b>‚è∞ –ó–∞–ø—É—Å–∫–∞—é –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ –±—ç–∫–∞–ø—ã –Ω–∞—á–∏–Ω–∞—è —Å {time_arg} (–ú–°–ö) —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.</b>")
            scheduler_service.schedule_interval_backup_starting(time_arg)
        except Exception:
            await msg.answer("<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM.</b>")
    else:
        waiting_msg = await msg.answer("<b>‚è≥ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é...</b>")

        for server in config.servers:
            try:
                archive_path = backuper.create_backup(server, save_local=False)
                filename = archive_path.name
                dt_str = get_file_creation_datetime_str(archive_path)
                caption = (
                    f"<b>üì¶ –§–∞–π–ª:</b> <code>{filename}</code>\n"
                    f"<b>üåê IP —Å–µ—Ä–≤–µ—Ä–∞:</b> <code>{server.ip}</code>\n"
                    f"<b>üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> <code>{dt_str}</code>\n"
                    f"<b>üë§ –ê–≤—Ç–æ—Ä:</b> <a href='https://{AUTHOR}'>{AUTHOR}</a>"
                )
                await msg.answer_document(FSInputFile(str(archive_path)), caption=caption)
                archive_path.unlink()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±—ç–∫–∞–ø–∞ —Å–µ—Ä–≤–µ—Ä–∞ {server.name}: {e}", exc_info=True)
                await msg.answer(f"<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—ç–∫–∞–ø –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server.name}.</b>")

        try:
            await msg.bot.delete_message(chat_id=waiting_msg.chat.id, message_id=waiting_msg.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è: {e}")

