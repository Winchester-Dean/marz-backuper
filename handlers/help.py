import logging
from pathlib import Path
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from config_reader import config
from datetime import datetime, time, timedelta
import zoneinfo

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("help"))
async def help_handler(msg: Message):
    try:
        backups = list(Path("tmp").glob(f"*.{config.backup.format}")) if Path("tmp").exists() else []

        # –ß–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
        hh, mm = map(int, config.backup.auto.split(":"))

        # –ú–°–ö —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        moscow_tz = zoneinfo.ZoneInfo("Europe/Moscow")
        now = datetime.now(moscow_tz)

        # –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–µ–≥–æ–¥–Ω—è (—Å–µ–≥–æ–¥–Ω—è –≤ backup.auto)
        today_backup_time = datetime.combine(now.date(), time(hour=hh, minute=mm), tzinfo=moscow_tz)

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø—Ä–æ—à–ª–æ, —Å–ª–µ–¥—É—é—â–∏–π –±—ç–∫–∞–ø –∑–∞–≤—Ç—Ä–∞
        if now >= today_backup_time:
            next_backup_dt = today_backup_time + timedelta(days=1)
        else:
            next_backup_dt = today_backup_time

        next_backup_str = next_backup_dt.strftime("%d.%m.%Y %H:%M")

        servers_count = len(config.servers)
        backup_format = config.backup.format
        author = "t.me/stix_r"

        text = (
            f"<b>üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏ –ª–æ–≥–∏–∫–µ –±–æ—Ç–∞:</b>\n\n"
            f"‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ <b>{next_backup_str}</b> (–ú–°–ö)\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤ –≤ tmp: <b>{len(backups)}</b>\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: <b>{servers_count}</b>\n"
            f"‚Ä¢ –§–æ—Ä–º–∞—Ç –∞—Ä—Ö–∏–≤–æ–≤: <b>{backup_format}</b>\n"
            f"‚Ä¢ –ê–≤—Ç–æ—Ä: <b>{author}</b>\n\n"
            "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "/backup ‚Äî —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
            "/backup HH:MM ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ –±—ç–∫–∞–ø—ã –Ω–∞—á–∏–Ω–∞—è —Å –≤—Ä–µ–º–µ–Ω–∏ HH:MM\n"
            "/send_backup &lt;ip&gt; ‚Äî –ø–æ–ª—É—á–∏—Ç—å –±—ç–∫–∞–ø —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ IP\n"
            "/list_backup ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤\n"
            "/clear_backups ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –±—ç–∫–∞–ø—ã\n"
            "/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )
        await msg.answer(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /help: {e}", exc_info=True)
        await msg.answer("<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏.</b>")

